LEX:-
1)Lex is a program that generates lexical analyzer. It is used with YACC parser generator.
2)The lexical analyzer is a program that transforms an input stream into a sequence of tokens.
3)It reads the input stream and produces the source code as output through implementing the lexical analyzer in the C program.

Structure of LEX:-
A Lex program is separated into three sections by %% delimiters. The formal of Lex source is as follows:

{ definitions }   
%%  
 { rules }   
%%   
{ user subroutines }  

=>Definitions include declarations of constant, variable and regular definitions.

=>Rules define the statement of form p1 {action1} p2 {action2}....pn {action}.
Where p1 describes the regular expression and action1 describes the actions what action the lexical analyzer should take when pattern p1 matches a lexeme.

=>User subroutines are auxiliary procedures needed by the actions. The subroutine can be loaded with the lexical analyzer and compiled separately

The yyvariables of LEX:-
The following variables are offered by LEX to aid the programmer in designing sophisticated lexical analyzers. These variables are accessible in the LEX program and are automatically declared by LEX in lex.yy.c.

yyin
yytext
yyleng

1)yyin is a variable of the type FILE* and points to the input file. yyin is defined by LEX automatically. If the programmer assigns an input file to yyin in the auxiliary functions section, then yyin is set to point to that file. Otherwise LEX assigns yyin to stdin(console input).

2)yytext is of type char* and it contains the lexeme currently found. Each invocation of the function yylex() results in yytext carrying a pointer to the lexeme found in the input stream by yylex(). The value of yytext will be overwritten after the next yylex() invocation.

3)yyleng is a variable of the type int and it stores the length of the lexeme pointed to by yytext.

The yyfunctions of LEX:-
yylex()
yywrap()

1)yylex() is a function of return type int. LEX automatically defines yylex() in lex.yy.c but does not call it. The programmer must call yylex() in the Auxiliary functions section of the LEX program. LEX generates code for the definition of yylex() according to the rules specified in the Rules section. When yylex() is invoked, it reads the input as pointed to by yyin and scans through the input looking for a matching pattern. When the input or a part of the input matches one of the given patterns, yylex() executes the corresponding action associated with the pattern as specified in the Rules section.

2)LEX doesn't define but it declares the function yywrap() of return-type int in the file lex.yy.c . LEX does not provide any definition for yywrap(). yylex() makes a call to yywrap() when it encounters the end of input. If yywrap() returns zero (indicating false) yylex() assumes there is more input and it continues scanning from the location pointed to by yyin. If yywrap() returns a non-zero value (indicating true), yylex() terminates the scanning process and returns 0 (i.e. “wraps up”).

Pattern	Matches
?	      zero or one copy of the preceding expression
*	      zero or more copies of the preceding expression
+	      one or more copies of the preceding expression
a|b	      a or b (alternating)
(ab)+	      one or more copies of ab (grouping)
abc	      abc
abc*	      ab abc abcc abccc ...
"abc*"	literal abc*
abc+	      abc abcc abccc abcccc ...
a(bc)+	abc abcbc abcbcbc ...
a(bc)?	a abc

Pattern           Matches
[abc]	            one of: a b c
[a-z]	            any letter a through z
[a\-z]	      one of: a - z
[-az]	            one of: - a z
[A-Za-z0-9]+	one or more alphanumeric characters
[ \t\n]+	      whitespace
[^ab]	            anything except: a b
[a^b]	            one of: a ^ b
[a|b]	            one of: a | b


YACC:-
1)YACC stands for Yet Another Compiler Compiler.
2)YACC provides a tool to produce a parser for a given grammar.
3)YACC is a program designed to compile a LALR (1) grammar.
4)It is used to produce the source code of the syntactic analyzer of the language produced by LALR (1) grammar.
5)The input of YACC is the rule or grammar and the output is a C program.

These are some points about YACC:

Input: A CFG- file.y

Output: A parser y.tab.c (yacc)

1)The output file "file.output" contains the parsing tables.
2)The file "file.tab.h" contains declarations.
3)The parser called the yyparse ().
4)Parser expects to use a function called yylex () to get tokens.


yyparse()
The y.tab.c file contains a function yyparse() which is an implementation (in C) of a push down automaton. yyparse() is responsible for parsing the given input file. The function yylex() is invoked by yyparse() to read tokens from the input file. Click here to view an example of yylex() definition. Note that the yyparse() function is automatically generated by YACC in the y.tab.c file. Although YACC declares yylex() in the y.tab.c file, it does not generate the definition for yylex(). Hence the yylex() function definition has to be supplied by you (either directly by defining yylex() in the auxiliary functions section (explained in the next section) or using a lexical analyzer generator like LEX). Each invocation of yylex() must return the next token (from the input steam) to yyparse(). 